{"remainingRequest":"/Users/dominiksatke/Desktop/shane/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/dominiksatke/Desktop/shane/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dominiksatke/Desktop/shane/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dominiksatke/Desktop/shane/src/components/news/NewsTwo.vue?vue&type=template&id=0f8a7ea6&scoped=true&","dependencies":[{"path":"/Users/dominiksatke/Desktop/shane/src/components/news/NewsTwo.vue","mtime":1650487355733},{"path":"/Users/dominiksatke/Desktop/shane/node_modules/cache-loader/dist/cjs.js","mtime":1650459887846},{"path":"/Users/dominiksatke/Desktop/shane/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1650459888422},{"path":"/Users/dominiksatke/Desktop/shane/node_modules/cache-loader/dist/cjs.js","mtime":1650459887846},{"path":"/Users/dominiksatke/Desktop/shane/node_modules/vue-loader/lib/index.js","mtime":1650459888238}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}