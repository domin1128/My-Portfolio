{"remainingRequest":"/Users/dominiksatke/Desktop/shane/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/dominiksatke/Desktop/shane/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dominiksatke/Desktop/shane/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dominiksatke/Desktop/shane/src/views/Preview.vue?vue&type=template&id=4109167e&scoped=true&","dependencies":[{"path":"/Users/dominiksatke/Desktop/shane/src/views/Preview.vue","mtime":1625117166000},{"path":"/Users/dominiksatke/Desktop/shane/node_modules/cache-loader/dist/cjs.js","mtime":1650459887846},{"path":"/Users/dominiksatke/Desktop/shane/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1650459888422},{"path":"/Users/dominiksatke/Desktop/shane/node_modules/cache-loader/dist/cjs.js","mtime":1650459887846},{"path":"/Users/dominiksatke/Desktop/shane/node_modules/vue-loader/lib/index.js","mtime":1650459888238}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygiZGl2IiwgWwogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaGFuZV90bV9hbGxfd3JhcCIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNoYW5lX3RtX2ludHJvIiB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZXJvIiwKICAgICAgICAgICAgc3R5bGU6IHsgYmFja2dyb3VuZEltYWdlOiAidXJsKCIgKyBfdm0uaGVyb0ludHJvICsgIikiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiAxNTAgfSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAieyBkZWxheTogMTUwIH0iLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHJldi1sb2dvIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltZy9sb2dvL25ldy9sb2dvLnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICJsb2dvIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiAxMDAgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiAxMDAgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgVnVlSlMgUGVyc29uYWwgUG9ydGZvbGlvIFRlbXBsYXRlICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgZGVsYXk6IDIwMCB9LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInsgZGVsYXk6IDIwMCB9IiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAid2hpdGUtZmlsbC1iZyBidG4tb3V0bGluZSBidG4tbWVkaXVtIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZGVtb3MiIH0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgU0VFIEFMTCBERU1PICIpXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkZW1vX2xpc3QiLCBhdHRyczogeyBpZDogImRlbW9zIiB9IH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbm5lciIgfSwgWwogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyBkZWxheTogNTAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInsgZGVsYXk6IDUwIH0iLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsaXN0X2lubmVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWcvaW50cm8vMS5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogImRlbW8gcHJldmlldyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIk1haW4gRGVtbyAoTm8gQW5pbWF0aW9uKSIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNoYW5lX3RtX2Z1bGxfbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvbWFpbi1kZW1vIiwgdGFyZ2V0OiAiX2JsYW5rIiB9LAogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyBkZWxheTogMTAwIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiAxMDAgfSIsCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImxpc3RfaW5uZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltZy9pbnRyby8yLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiZGVtbyBwcmV2aWV3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiQ3JlYXRpdmUgUG9ydGZvbGlvIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2hhbmVfdG1fZnVsbF9saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86ICIvY3JlYXRpdmUtcG9ydGZvbGlvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgZGVsYXk6IDE1MCB9LAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAieyBkZWxheTogMTUwIH0iLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsaXN0X2lubmVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWcvaW50cm8vMy5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogImRlbW8gcHJldmlldyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIk1vZGVybiBQb3J0Zm9saW8iKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaGFuZV90bV9mdWxsX2xpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiAiL21vZGVybi1wb3J0Zm9saW8iLCB0YXJnZXQ6ICJfYmxhbmsiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiAyMDAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInsgZGVsYXk6IDIwMCB9IiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibGlzdF9pbm5lciIgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1nL2ludHJvLzQuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJkZW1vIHByZXZpZXciLAogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJDcmVhdGl2ZSBQb3J0Zm9saW8gMDIiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaGFuZV90bV9mdWxsX2xpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogIi9jcmVhdGl2ZS1wb3J0Zm9saW8tMDIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNoYW5lX3RtX2ZlYXR1cmUgc2VjdGlvbi1zZXBhcmF0b24iIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgZGVsYXk6IDI1MCwgZGlzdGFuY2U6ICIyMHB4IiB9LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAieyBkZWxheTogMjUwLCBkaXN0YW5jZTogJzIwcHgnIH0iLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW50cm9fdGl0bGUiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX2MoImgzIiwgW192bS5fdigiU2hhbmUgQWxsIEZlYXR1cmVzIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciBmbHVpZCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiAyMDAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiAyMDAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fbSgxKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiAzMDAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiAzMDAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fbSgyKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiA0MDAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiA0MDAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fbSgzKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiA1MDAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiA1MDAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fbSg0KV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiA2MDAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiA2MDAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fbSg1KV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiA3MDAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiA3MDAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fbSg2KV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiA4MDAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiA4MDAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fbSg3KV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiA5MDAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiA5MDAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fbSg4KV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaGFuZV90bV9zZWN0aW9uIiB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaGFuZV9wdXJjaGFzZV9iYW5uZXIiLAogICAgICAgICAgICBzdHlsZTogeyBiYWNrZ3JvdW5kSW1hZ2U6ICJ1cmwoIiArIF92bS5mb290ZXJQYXR0ZXJuICsgIikiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgZGVsYXk6IDUwIH0sCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAieyBkZWxheTogNTAgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJMZXQncyBnbyB0byBQdXJjaGFzZSIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNjcm9sbC1yZXZlYWwiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgZGVsYXk6IDE1MCB9LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInsgZGVsYXk6IDE1MCB9IiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNoYW5lX3RtX2J1dHRvbiIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiLCB0YXJnZXQ6ICJfYmxhbmsiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFBVUkNIQVNFIE5PVyAiKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2hhbmVfdG1fc2VjdGlvbiIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2hhbmVfdG1fY29weXJpZ2h0IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImlubmVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2Nyb2xsLXJldmVhbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zY3JvbGwtcmV2ZWFsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IGRlbGF5OiAxNTAsIGRpc3RhbmNlOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ7IGRlbGF5OiAxNTAsIGRpc3RhbmNlOiAnMjBweCcgfSIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIMKpICIgKyBfdm0uX3MobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpKSArICIgU2hhbmUgIiksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly90aGVtZWZvcmVzdC5uZXQvdXNlci9pYi10aGVtZXMiLAogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBpYi10aGVtZXMgIildCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gIiksCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICBdKSwKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbnRyb190aXRsZSIgfSwgWwogICAgICBfYygiaDMiLCBbX3ZtLl92KCJBbGwgUmVhZHkgRGVtb3MiKV0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2luZ2xlLWZlYXR1cmVzIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1nL3N2Zy9wcmV2aWV3LzEuc3ZnIiksIGFsdDogImljb24iIH0sCiAgICAgIH0pLAogICAgICBfYygiaDQiLCBbX3ZtLl92KCJMYXRlc3QgUmVhY3QgMTcuMC4yIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBXZSB1c2VkIGxhdGVzdCByZWFjdCB2ZXJ0aW9uIF4xNy4wLjIuIEl0cyBhIGF3ZXNvbWUgZGVzaWduIG1hZGUgYnkgcmVhY3QuICIKICAgICAgICApLAogICAgICBdKSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNpbmdsZS1mZWF0dXJlcyIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltZy9zdmcvcHJldmlldy8yLnN2ZyIpLCBhbHQ6ICJpY29uIiB9LAogICAgICB9KSwKICAgICAgX2MoImg0IiwgW192bS5fdigiTm8gQm9vdHN0cmFwISIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgTWFkZSB0aGlzIHRlbXBsYXRlIG5vIGZyYW1ld29yayBkZXBlbmRlbmN5LlVzYWdlIDEwMCUgaGFuZCBtYWRlIHB1cmUgQ1NTLiAiCiAgICAgICAgKSwKICAgICAgXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaW5nbGUtZmVhdHVyZXMiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWcvc3ZnL3ByZXZpZXcvMy5zdmciKSwgYWx0OiAiaWNvbiIgfSwKICAgICAgfSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIlBlcmZlY3QgUmVzcG9uc2l2ZSIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgU2hhbmUgaXMgZml0IGZvciBhbGwgZGV2aWNlcyBsaWtlIG1vYmlsZSx0YWJsZXQsZGVza3RvcCBldmVuIGxhcmdlciBkZXZpY2UgdG9vLiAiCiAgICAgICAgKSwKICAgICAgXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaW5nbGUtZmVhdHVyZXMiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWcvc3ZnL3ByZXZpZXcvNC5zdmciKSwgYWx0OiAiaWNvbiIgfSwKICAgICAgfSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIldlbGwgRG9jdW1lbnRlZCIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgU2hhbmUgZG9jdW1lbnRlZCBvcmdhbml6ZWQgd2F5IGFuZCBpdHMgY3VzdG9taXphdGlvbiBpbnN0cnVjdGlvbiBlYXN5IGZvciBhbGwuICIKICAgICAgICApLAogICAgICBdKSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNpbmdsZS1mZWF0dXJlcyIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltZy9zdmcvcHJldmlldy81LnN2ZyIpLCBhbHQ6ICJpY29uIiB9LAogICAgICB9KSwKICAgICAgX2MoImg0IiwgW192bS5fdigiU2FzcyBBdmFpbGFibGUiKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFNoYW5lIHRhbXBsYXRlIGhhcyBTYXNzIGF2YWlsYWJsZSBmb3IgY3NzLiBZb3UgY2FuIENoYW5nZSBjc3MgYnkgc2FzcyAiCiAgICAgICAgKSwKICAgICAgXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaW5nbGUtZmVhdHVyZXMiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWcvc3ZnL3ByZXZpZXcvNi5zdmciKSwgYWx0OiAiaWNvbiIgfSwKICAgICAgfSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIkZhc3QgTG9hZGluZyBTcGVlZCIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgU2hhbmUgaXMgZmFzdGVyIGxvYWRpbmcgc3BlZWQuSXQncyBjcmVhdGUgeW91ciB0ZW1wbGF0ZSBzbyBtdWNoIGZhc3Rlci4gIgogICAgICAgICksCiAgICAgIF0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2luZ2xlLWZlYXR1cmVzIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1nL3N2Zy9wcmV2aWV3Lzcuc3ZnIiksIGFsdDogImljb24iIH0sCiAgICAgIH0pLAogICAgICBfYygiaDQiLCBbX3ZtLl92KCJNb2Rlcm4gRGVzaWduIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJdCdzIGZvbGxvd2VkIHdpdGggbW9kZXJuLCBjcmVhdGl2ZSBhbmQgdHJlbmR5IGRlc2lnbiBmb3IgQ3JlYXRpdmUgT3JnYW5pemF0aW9uLiAiCiAgICAgICAgKSwKICAgICAgXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaW5nbGUtZmVhdHVyZXMiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWcvc3ZnL3ByZXZpZXcvOC5zdmciKSwgYWx0OiAiaWNvbiIgfSwKICAgICAgfSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIjI0IFN1cHBvcnQgU3lzdGVtIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBXZSBhcmUgcHJvdmlkZSAyNCBob3VycyBzdXBwb3J0IGZvciBhbGwgY2xpZW50cy5Zb3UgY2FuIHB1cmNoYXNlIHdpdGhvdXQgaGVzaXRhdGlvbi4gIgogICAgICAgICksCiAgICAgIF0pLAogICAgXSkKICB9LApdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}